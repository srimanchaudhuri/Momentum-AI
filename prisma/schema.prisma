generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Status {
  ACTIVE
  COMPLETED
  FAILED
}

enum Recommend {
  LOW
  MODERATE
  HIGH
}

model User {
  id           Int    @id @default(autoincrement())
  name         String @db.VarChar(255)
  email        String @unique @db.VarChar(255)
  password     String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  goals        Goal[]
  progressLogs ProgressLogs[]
  aiTips       AITips[]
}

model Goal {
  id          Int    @id @default(autoincrement())
  userId      Int    
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String @db.VarChar(255)
  description String?
  startDate   DateTime
  endDate     DateTime
  status      Status  @default(ACTIVE)
  metadata    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  progressLogs ProgressLogs[]
  aiTips      AITips[]
}

model ProgressLogs {
  id        Int    @id @default(autoincrement())
  userId    Int    
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  goalId    Int    
  goal      Goal   @relation(fields: [goalId], references: [id], onDelete: Cascade)
  logDate   DateTime @default(now())
  logText   String
  score     Int
  createdAt DateTime @default(now())
  deletedAt DateTime?
}

model AITips {
  id             Int     @id @default(autoincrement()) 
  goalId         Int    
  goal           Goal    @relation(fields: [goalId], references: [id], onDelete: Cascade)
  userId         Int    
  user           User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  tipText        String
  recommendation Recommend @default(MODERATE)
  createdAt      DateTime  @default(now())
  acknowledged   Boolean   @default(false)
}
